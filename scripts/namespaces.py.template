# This file is @generated by `scripts/codegen.py namespaces`. Do not edit.

from __future__ import annotations

from typing import TYPE_CHECKING, Literal, NoReturn, final

from monalisten._errors import MonalistenSetupError
from monalisten._namespace import HookNamespace, build_registrar

if TYPE_CHECKING:
    from monalisten import events
    from monalisten._namespace import HookWrapper


class EventNamespace:
    def __call__(self, _: object) -> NoReturn:
        msg = (
            "bare @Monalisten.event is not allowed; to create a hook for all events,"
            " use @Monalisten.event.any"
        )
        raise MonalistenSetupError(msg)

    def __getitem__(self, name: str) -> HookNamespace[NoReturn, events.Any]:
        return getattr(self, name)

    def __init__(self) -> None:  # noqa: PLR0915
        self.any = HookNamespace[Literal["*"], "events.Any"]()
#-----#
        self.{event} = {event_pascal}Namespace()
#-----#

@final
class {event}Namespace(HookNamespace[NoReturn, "events.{event}"]):
    pass

#-----#

{event}Actions = Literal[
{actions_literal}
]


@final
class {event}Namespace(HookNamespace[{event}Actions, "events.{event}"]):

#-----#
    {action}: HookWrapper[[events.{event}{action_pascal}]] = build_registrar("{action}")
